using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.IO;
using System;
using UnityEngine.UI;
using System.Xml.Serialization;
using SharpKml;
using SharpKml.Base;
using SharpKml.Dom;
using SharpKml.Engine;
using System.Globalization;

public class SurfaceTool : Tool
{
    [HideInInspector]
    public static List<GameObject> instanceList = new List<GameObject>();

    public override IEnumerator ToolCoroutine()
    {
        WaitForEndOfFrame wfeof = new WaitForEndOfFrame();
        ToolController.ToolIsCurrentlyRunning = true;
        ToolController.ToolControllerInterfaceIsCurrentlyRunning = false;

        toolControllerComponent.MeasurementControlUI.gameObject.SetActive(false);
        if (StateSingleton.stateView == StateSingleton.StateView.MODE2D_PLUS_OCULUS)
            GameObject.Find("Canvas_Oculus").gameObject.transform.Find("MeasurementControlUI").gameObject.SetActive(false);

        // hold until trigger is released // this avoids instant placement 
        if (StateSingleton.stateView == StateSingleton.StateView.MODE2D_PLUS_OCULUS || StateSingleton.stateView == StateSingleton.StateView.MODE2D_PLUS_3DVP_PLUS_OCULUS)
        {
            while (OVRInput.Get(OVRInput.Axis1D.SecondaryIndexTrigger) > 0.2f)
            {
                yield return wfeof;
            }
        }

        // temporary objects
        GameObject TempPlacemark = null, TempPlacemarkInfo = null;
        Vector3 TempNormal = new Vector3();
        List<GameObject> placemarks = new List<GameObject>();
        List<Vector3> Normals = new List<Vector3>();
        Vector3Decimal realPosition;

        // Place markers
        for (int times = 0; times < 1; times++)
        {
            //Instantiate placemark
            TempPlacemark = Instantiate(toolControllerComponent.SurfaceToolObject);
            TempPlacemark.transform.localScale *= toolControllerComponent.MarkerScale;
            TempPlacemark.name = "distance placemark";

            //boolean flags
            bool placemarkConfirmed = false;
            bool legalPlacemarkPlace = false;
            bool wasHolding = true;

            //Handling Placemark
            RaycastHit hit;
            while (placemarkConfirmed == false)
            {
                // end coroutine early ?
                if (checkIfToolShouldQuit())
                {
                    toolControllerComponent.OculusMasterObject.gameObject.transform.Find("Sphere").gameObject.GetComponent<Renderer>().material.color = new Color(0.2783019f, 0.3061422f, 1, 1);

                    placemarkConfirmed = true;
                    Destroy(TempPlacemark);
                    foreach (var p in placemarks)
                    {
                        Destroy(p);
                    }
                    ToolController.ToolIsCurrentlyRunning = false;
                    yield break;
                }

                // holding button?
                if (StateSingleton.stateView != StateSingleton.StateView.MODE2D_PLUS_OCULUS || StateSingleton.stateView != StateSingleton.StateView.MODE2D_PLUS_3DVP_PLUS_OCULUS)
                {
                    if (wasHolding == true && OVRInput.Get(OVRInput.Axis1D.SecondaryIndexTrigger) < 0.2f)
                        wasHolding = false;
                }

                // Trailing Waypoint
                if (Physics.Raycast(master.transform.position, directionMaster.transform.forward, out hit, 100000)) //  <--raycast for placement
                {
                    TempPlacemark.transform.position = hit.point;
                    TempNormal = hit.normal;

                    Vector3 _FlattenedNormal = Vector3.ProjectOnPlane(TempNormal, Vector3.up).normalized;
                    Vector3 _StrikeVector = Quaternion.Euler(0, -90, 0) * _FlattenedNormal; // Stride as Unity World Vector
                    Vector3 _DipVector = Vector3.Cross(TempNormal, _StrikeVector); // Slope as Unity World Vector

                    // convert vectors to angles 
                    float _DipDirection = VirtualMeter.CalculateHeading(_FlattenedNormal);
                    float _Strike = VirtualMeter.CalculateHeading(_StrikeVector);
                    float _DipAngle = VirtualMeter.CalculateInclination(_DipVector);

                    TempPlacemark.transform.eulerAngles = new Vector3(0.0f, _DipDirection, 0.0f);
                    TempPlacemark.transform.Find("Dip").gameObject.transform.localEulerAngles = new Vector3(90.0f - _DipAngle, 0.0f, 0.0f);

                    legalPlacemarkPlace = true;

                    //Showing info on toolInfo
                    realPosition = VirtualMeter.CalculateGPSPosition(TempPlacemark.transform.position);
                    toolControllerComponent.updateGUIMenus(
                      "Surface",
                      "Northing (m): " + realPosition.z.ToString("0.000") +
                      "\nEasting (m): " + realPosition.x.ToString("0.000") +
                      "\nAltitude (m): " + realPosition.y.ToString("0.000")
                      );

                }
                else  //If not well placed then invalidate
                {
                    TempPlacemark.transform.position = master.transform.position + directionMaster.transform.forward * 100000;
                    toolControllerComponent.updateGUIMenus(
                        "Placemark", "Northing (m): undefined \nEasting (m): undefined \nAltitude (m): undefined");
                    legalPlacemarkPlace = false;
                }

                // if triggered 
                if (
                    (Input.GetMouseButton(0) ||
                        (
                            (StateSingleton.stateView == StateSingleton.StateView.MODE2D_PLUS_OCULUS || StateSingleton.stateView == StateSingleton.StateView.MODE2D_PLUS_3DVP_PLUS_OCULUS) 
                            && OVRInput.Get(OVRInput.Axis1D.SecondaryIndexTrigger) > 0.5f && wasHolding == false )
                        )
                    && legalPlacemarkPlace
                    )
                {
                    toolControllerComponent.OculusMasterObject.gameObject.transform.Find("Sphere").gameObject.GetComponent<Renderer>().material.color = new Color(0.2783019f, 0.3061422f, 1, 1);

                    placemarkConfirmed = true;
                    placemarks.Add(TempPlacemark);
                    Normals.Add(TempNormal);
                }
                yield return wfeof;
            }
            while (Input.GetMouseButton(0))
                yield return wfeof;
        }

        //do calculations        
        //https://en.wikipedia.org/wiki/Strike_and_dip
        //

        Vector3 FlattenedNormal = Vector3.ProjectOnPlane(Normals[0], Vector3.up).normalized;
        Vector3 StrikeVector = Quaternion.Euler(0, -90, 0) * FlattenedNormal; // Stride as Unity World Vector
        Vector3 DipVector = Vector3.Cross(Normals[0], StrikeVector); // Slope as Unity World Vector

        // convert vectors to angles 
        float DipDirection = VirtualMeter.CalculateHeading(FlattenedNormal);
        float Strike = VirtualMeter.CalculateHeading(StrikeVector);
        float DipAngle = VirtualMeter.CalculateInclination(DipVector);

        Dictionary<string, decimal> Values = new Dictionary<string, decimal>{
            { "DipDirection" , (decimal)DipDirection },
            { "Strike" , (decimal)Strike },
            { "Dip" , (decimal)DipAngle }
        };

        // create tool instance        
        toolControllerComponent.CreateToolInstance("Surface",
            "Strike (°): " + Strike.ToString("0.000") +
            "\nDip (°): " + DipAngle.ToString("0.000") +
            "\nDip Direction (°): " + DipDirection.ToString("0.000"),
            Tool.toolType.SURFACE,
            Values,
            placemarks, true);
    }

    public void startToolInterface()
    {
        toolControllerComponent.MeasurementControlUI.gameObject.transform.Find("UpperPanel").gameObject.transform.Find("Text").gameObject.GetComponent<Text>().text = "Surface tool";

        toolControllerComponent.MeasurementControlUI.gameObject.transform.Find("Content").gameObject.transform.Find("StartTool_placemark").gameObject.SetActive(false);
        toolControllerComponent.MeasurementControlUI.gameObject.transform.Find("Content").gameObject.transform.Find("StartTool_line").gameObject.SetActive(false);
        toolControllerComponent.MeasurementControlUI.gameObject.transform.Find("Content").gameObject.transform.Find("StartTool_polygon").gameObject.SetActive(false);
        toolControllerComponent.MeasurementControlUI.gameObject.transform.Find("Content").gameObject.transform.Find("StartTool_ruler").gameObject.SetActive(false);
        toolControllerComponent.MeasurementControlUI.gameObject.transform.Find("Content").gameObject.transform.Find("StartTool_surface").gameObject.SetActive(true);

        toolControllerComponent.MeasurementControlUI.gameObject.transform.Find("Content").gameObject.transform.Find("EmptyTrash").gameObject.GetComponent<Button>().onClick.AddListener(DeleteAllInstance);
        toolControllerComponent.MeasurementControlUI.gameObject.transform.Find("Content").gameObject.transform.Find("SaveToMemory").gameObject.GetComponent<Button>().onClick.AddListener(SaveMultiInstance);
        toolControllerComponent.MeasurementControlUI.gameObject.transform.Find("Content").gameObject.transform.Find("StopTool").gameObject.GetComponent<Button>().onClick.AddListener(CancelButton);

        toolControllerComponent.MeasurementControlUI.SetActive(true);
        if (StateSingleton.stateView == StateSingleton.StateView.MODE2D_PLUS_OCULUS)
        {
            GameObject.Find("Canvas_Oculus").gameObject.transform.Find("MeasurementControlUI").gameObject.transform.Find("UpperPanel").gameObject.transform.Find("Text").gameObject.GetComponent<Text>().text = "Surface tool";
            GameObject.Find("Canvas_Oculus").gameObject.transform.Find("MeasurementControlUI").gameObject.SetActive(true);

            GameObject.Find("Canvas_Oculus").gameObject.transform.Find("MeasurementControlUI").gameObject.transform.Find("Content").gameObject.transform.Find("StartTool_placemark").gameObject.SetActive(false);
            GameObject.Find("Canvas_Oculus").gameObject.transform.Find("MeasurementControlUI").gameObject.transform.Find("Content").gameObject.transform.Find("StartTool_line").gameObject.SetActive(false);
            GameObject.Find("Canvas_Oculus").gameObject.transform.Find("MeasurementControlUI").gameObject.transform.Find("Content").gameObject.transform.Find("StartTool_polygon").gameObject.SetActive(false);
            GameObject.Find("Canvas_Oculus").gameObject.transform.Find("MeasurementControlUI").gameObject.transform.Find("Content").gameObject.transform.Find("StartTool_ruler").gameObject.SetActive(false);
            GameObject.Find("Canvas_Oculus").gameObject.transform.Find("MeasurementControlUI").gameObject.transform.Find("Content").gameObject.transform.Find("StartTool_surface").gameObject.SetActive(true);

            GameObject.Find("Canvas_Oculus").gameObject.transform.Find("MeasurementControlUI").gameObject.transform.Find("Content").gameObject.transform.Find("EmptyTrash").gameObject.GetComponent<Button>().onClick.AddListener(DeleteAllInstance);
            GameObject.Find("Canvas_Oculus").gameObject.transform.Find("MeasurementControlUI").gameObject.transform.Find("Content").gameObject.transform.Find("SaveToMemory").gameObject.GetComponent<Button>().onClick.AddListener(SaveMultiInstance);
            GameObject.Find("Canvas_Oculus").gameObject.transform.Find("MeasurementControlUI").gameObject.transform.Find("Content").gameObject.transform.Find("StopTool").gameObject.GetComponent<Button>().onClick.AddListener(CancelButton);

            GameObject.Find("Canvas_Oculus").gameObject.transform.Find("MeasurementControlUI").transform.localPosition = new Vector3(0.0f, -400.0f, 0.0f);

        }
        PauseAndGUIBehaviour.isToolMenu = false;
        ToolController.ToolControllerInterfaceIsCurrentlyRunning = true;
    }

    public void CancelButton()
    {
        toolControllerComponent.MeasurementControlUI.SetActive(false);

        if (StateSingleton.stateView == StateSingleton.StateView.MODE2D_PLUS_OCULUS)
        {
            GameObject.Find("Canvas_Oculus").gameObject.transform.Find("MeasurementControlUI").gameObject.SetActive(false);
        }

        if (PauseAndGUIBehaviour.isPause)
            PauseAndGUIBehaviour.isPause = false;
        ToolController.ToolIsCurrentlyRunning = false;
        ToolController.ToolControllerInterfaceIsCurrentlyRunning = false;
    }

    public override GameObject LoadFromFile(string FilePath)
    {
        List<GameObject> placemarks = new List<GameObject>();

        if (File.Exists(FilePath))
        {
            String fileData = System.IO.File.ReadAllText(FilePath);
            String[] lines = fileData.Split("\n"[0]);
            GameObject TempPlacemark;

            foreach (String line in lines)
            {
                String[] data = line.Split(","[0]);
                if (data.Length == 3) // discard non-coordinate lines
                {
                    decimal x = decimal.Parse(data[0]);
                    decimal y = decimal.Parse(data[1]);
                    decimal z = decimal.Parse(data[2]);

                    TempPlacemark = Instantiate(toolControllerComponent.SurfaceToolObject);
                    TempPlacemark.transform.localScale *= toolControllerComponent.MarkerScale;
                    TempPlacemark.name = "distance placemark";

                    TempPlacemark.transform.position = new Vector3((float)x, (float)y, (float)z); // this will need to account for offset
                    placemarks.Add(TempPlacemark);
                }
            }

            //do calculations
            Vector3Decimal realPosition = VirtualMeter.CalculateRealPositionOfPoint(placemarks[0].transform.position - 40 * Vector3.up);

            // create value dictionary
            Dictionary<string, decimal> dict = new Dictionary<string, decimal>()
                                                {
                { "Lat(°)" ,    realPosition.z },
                { "Lon(°)" ,     realPosition.x },
                { "Altitude(m)" ,    realPosition.y }
                                                };

            // create tool instance
            return toolControllerComponent.CreateToolInstance("Surface",
                "Lat(°): " + realPosition.z.ToString("0.000") +
                "\nLon(°): " + realPosition.x.ToString("0.000") +
                "\nAltitude(m): " + realPosition.y.ToString("0.000"),
                Tool.toolType.PLACEMARK,
                dict, placemarks);
        }
        return null;
    }

    // export

    public static void SaveSingleInstance(ToolInstance instance)
    {
        string FilePath = "Outputs/Surfaces";


        // CSV export

        var directory = new DirectoryInfo(Application.dataPath);
        var directoryPath = Path.Combine(directory.Parent.FullName, FilePath);

        try
        {
            if (!Directory.Exists(directoryPath))
            {
                Directory.CreateDirectory(directoryPath);
            }
        }
        catch (IOException ex)
        {
            Console.WriteLine(ex.Message);
        }

        var path = Path.Combine(directoryPath, string.Format("{0}.csv", instance.ToolTitle.ToString() + " " + DateTime.Now.ToString("yyyyMMdd_Hmmssffff")));

        if (File.Exists(path))
        {
            File.Delete(path);
        }

        //var sr = File.CreateText(path);
        StreamWriter writer = new StreamWriter(path, true);

        string csvData = "";
        csvData += "#id, Lat, Lon, z, Stride, Dip, DipDirection, Comments\n";

        Vector3Decimal realPosition = new Vector3Decimal();
        for (int i = 0; i < instance.PlacemarkList.Count; ++i)
        {
            realPosition = VirtualMeter.CalculateGPSPosition(instance.PlacemarkList[i].transform.position);

            Debug.Log(realPosition.x);

            csvData += i.ToString() + ",";
            csvData += realPosition.z.ToString("0.0000000000000", new CultureInfo("en-GB")) + ",";
            csvData += realPosition.x.ToString("0.0000000000000", new CultureInfo("en-GB")) + ",";
            csvData += realPosition.y.ToString("0.000", new CultureInfo("en-GB")) + ",";
            csvData += instance.ValueDict["Strike"].ToString("0.000", new CultureInfo("en-GB")) + ",";
            csvData += instance.ValueDict["Dip"].ToString("0.000", new CultureInfo("en-GB")) + ",";
            csvData += instance.ValueDict["DipDirection"].ToString("0.000", new CultureInfo("en-GB")) + ",";
            csvData += DateTime.Now.ToString("yyyyMMdd_Hmmssffff") + "\n";
        }

        writer.WriteLine(csvData, "en-GB");
        writer.Close();


        //kml

        var kml = new SharpKml.Dom.Kml();
        kml.AddNamespacePrefix(KmlNamespaces.GX22Prefix, KmlNamespaces.GX22Namespace);

        // Create style 1
        var style = new Style();
        style.Id = "s_ylw-pushpin";
        style.Icon = new IconStyle();
        style.Icon.Hotspot = new Hotspot();
        style.Icon.Hotspot.X = 20.0;
        style.Icon.Hotspot.Y = 2.0;
        style.Icon.Hotspot.XUnits = Unit.Pixel;
        style.Icon.Hotspot.YUnits = Unit.Pixel;
        style.Icon.Icon = new IconStyle.IconLink(new Uri("http://maps.google.com/mapfiles/kml/pushpin/ylw-pushpin.png"));
        style.Icon.Scale = 1.1;

        // Create style 2
        var style2 = new Style();
        style2.Id = "s_ylw-pushpin_hl";
        style2.Icon = new IconStyle();
        style2.Icon.Hotspot = new Hotspot();
        style2.Icon.Hotspot.X = 20.0;
        style2.Icon.Hotspot.Y = 2.0;
        style2.Icon.Hotspot.XUnits = Unit.Pixel;
        style2.Icon.Hotspot.YUnits = Unit.Pixel;
        style2.Icon.Icon = new IconStyle.IconLink(new Uri("http://maps.google.com/mapfiles/kml/pushpin/ylw-pushpin.png"));
        style2.Icon.Scale = 1.3;

        //stylemap
        var pair1 = new Pair();
        pair1.State = StyleState.Normal;
        pair1.StyleUrl = new Uri("#s_ylw-pushpin", UriKind.Relative);

        var pair2 = new Pair();
        pair2.State = StyleState.Highlight;
        pair2.StyleUrl = new Uri("#s_ylw-pushpin_hl", UriKind.Relative);

        var stylemap = new StyleMapCollection();
        stylemap.Id = "m_ylw - pushpin";
        stylemap.Add(pair1);
        stylemap.Add(pair2);

        // This will be the location of the Placemark.
        realPosition = VirtualMeter.CalculateGPSPosition(instance.PlacemarkList[0].transform.position);
        var point = new Point();
        point.Coordinate = new Vector((double)realPosition.z, (double)realPosition.x, (double)realPosition.y);

        //point.Tilt = 40;

        // This is the Element to save to the Kml file.
        var placemark = new Placemark();
        placemark.Geometry = point;
        placemark.Name = instance.ToolTitle;
        placemark.StyleUrl = new Uri("#m_ylw-pushpin", UriKind.Relative);

        // create the document
        var document = new SharpKml.Dom.Document();
        document.Name = instance.ToolTitle + " " + DateTime.Now.ToString("yyyyMMdd_Hmmssffff");
        document.AddStyle(stylemap);
        document.AddStyle(style);
        document.AddStyle(style2);
        document.AddFeature(placemark);

        // set root 
        kml.Feature = document;

        // save to file
        KmlFile kmlf = KmlFile.Create(kml, false);
        using (var stream = System.IO.File.OpenWrite(Path.Combine(directoryPath, document.Name + ".kml")))
        {
            kmlf.Save(stream);
        }


       // ToolController.globalToolControllerObject.StartCoroutine(Tool.ShowNotification("Single measure has been exported", 1));
    }

    public static void SaveMultiInstance()
    {
        string FilePath = "Outputs/Surfaces";


        // CSV
        var directory = new DirectoryInfo(Application.dataPath);
        var directoryPath = Path.Combine(directory.Parent.FullName, FilePath);

        try
        {
            if (!Directory.Exists(directoryPath))
            {
                Directory.CreateDirectory(directoryPath);
            }
        }
        catch (IOException ex)
        {
            Console.WriteLine(ex.Message);
        }

        var path = Path.Combine(directoryPath, "AllSurfaces " + DateTime.Now.ToString("yyyyMMdd_Hmmssffff") + ".csv");

        if (File.Exists(path))
        {
            File.Delete(path);
        }

        var sr = File.CreateText(path);
        string csvData = "";
        csvData += "#id, Lat, Lon, z, Stride, Dip, DipDirection, Comments\n";

        Vector3Decimal realPosition = new Vector3Decimal();
        foreach (var p in instanceList)
        {
            for (int i = 0; i < p.GetComponent<ToolInstance>().PlacemarkList.Count; ++i)
            {
                realPosition = VirtualMeter.CalculateGPSPosition(p.GetComponent<ToolInstance>().PlacemarkList[i].transform.position);
                csvData += i.ToString() + ",";
                csvData += ((double)realPosition.z).ToString("0.0000000000000", new CultureInfo("en-GB")) + ",";
                csvData += ((double)realPosition.x).ToString("0.0000000000000", new CultureInfo("en-GB")) + ",";
                csvData += ((double)realPosition.y).ToString("0.000", new CultureInfo("en-GB")) + ",";
                csvData += p.GetComponent<ToolInstance>().ValueDict["Strike"].ToString("0.000", new CultureInfo("en-GB")) + ",";
                csvData += p.GetComponent<ToolInstance>().ValueDict["Dip"].ToString("0.000", new CultureInfo("en-GB")) + ",";
                csvData += p.GetComponent<ToolInstance>().ValueDict["DipDirection"].ToString("0.000", new CultureInfo("en-GB")) + ",";
                csvData += DateTime.Now.ToString("yyyyMMdd_Hmmssffff") + "\n";
            }
        }

        sr.WriteLine(csvData);
        sr.Close();


        // KML

        var kml = new SharpKml.Dom.Kml();
        kml.AddNamespacePrefix(KmlNamespaces.GX22Prefix, KmlNamespaces.GX22Namespace);

        // Create style 1
        var style = new Style();
        style.Id = "s_ylw-pushpin";
        style.Icon = new IconStyle();
        style.Icon.Hotspot = new Hotspot();
        style.Icon.Hotspot.X = 20.0;
        style.Icon.Hotspot.Y = 2.0;
        style.Icon.Hotspot.XUnits = Unit.Pixel;
        style.Icon.Hotspot.YUnits = Unit.Pixel;
        style.Icon.Icon = new IconStyle.IconLink(new Uri("http://maps.google.com/mapfiles/kml/pushpin/ylw-pushpin.png"));
        style.Icon.Scale = 1.1;

        // Create style 2
        var style2 = new Style();
        style2.Id = "s_ylw-pushpin_hl";
        style2.Icon = new IconStyle();
        style2.Icon.Hotspot = new Hotspot();
        style2.Icon.Hotspot.X = 20.0;
        style2.Icon.Hotspot.Y = 2.0;
        style2.Icon.Hotspot.XUnits = Unit.Pixel;
        style2.Icon.Hotspot.YUnits = Unit.Pixel;
        style2.Icon.Icon = new IconStyle.IconLink(new Uri("http://maps.google.com/mapfiles/kml/pushpin/ylw-pushpin.png"));
        style2.Icon.Scale = 1.3;

        //stylemap
        var pair1 = new Pair();
        pair1.State = StyleState.Normal;
        pair1.StyleUrl = new Uri("#s_ylw-pushpin", UriKind.Relative);

        var pair2 = new Pair();
        pair2.State = StyleState.Highlight;
        pair2.StyleUrl = new Uri("#s_ylw-pushpin_hl", UriKind.Relative);

        var stylemap = new StyleMapCollection();
        stylemap.Id = "m_ylw - pushpin";
        stylemap.Add(pair1);
        stylemap.Add(pair2);

        // create the document
        var document = new SharpKml.Dom.Document();
        document.Name = "AllSurfaces " + DateTime.Now.ToString("yyyyMMdd_Hmmssffff");
        document.AddStyle(stylemap);
        document.AddStyle(style);
        document.AddStyle(style2);

        // This will be the location of the Placemark.
        foreach (var p in instanceList)
        {
            realPosition = VirtualMeter.CalculateGPSPosition(p.GetComponent<ToolInstance>().PlacemarkList[0].transform.position);
            var point = new Point();
            point.Coordinate = new Vector((double)realPosition.z, (double)realPosition.x, (double)realPosition.y);

            // This is the Element to save to the Kml file.
            var placemark = new Placemark();
            placemark.Geometry = point;
            placemark.Name = p.GetComponent<ToolInstance>().ToolTitle;
            placemark.StyleUrl = new Uri("#m_ylw-pushpin", UriKind.Relative);

            document.AddFeature(placemark);
        }

        // set root 
        kml.Feature = document;

        // save to file
        KmlFile kmlf = KmlFile.Create(kml, false);
        using (var stream = System.IO.File.OpenWrite(Path.Combine(directoryPath, document.Name + ".kml")))
        {
            kmlf.Save(stream);
        }

        ToolController.globalToolControllerObject.StartCoroutine(Tool.ShowNotificationLabelForMesuring("Done!", 1.5f));
        //ToolController.globalToolControllerObject.StartCoroutine(Tool.ShowNotification("Multiple surfaces have been exported", 1));
    }

    public static void DeleteAllInstance()
    {
        Debug.Log("instanceList " + instanceList.Count);
        foreach (var p in instanceList)
        {
            for (int i = 0; i < p.GetComponent<ToolInstance>().PlacemarkList.Count; ++i)
            {
                Debug.Log("i: " + i);
            }
        }

    }
}
