using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.Events;

public class Tool : MonoBehaviour
{    
    public enum toolType
    {
        PLACEMARK,
        POLYGON,
        LINE,
        PROFILE,
        RULER,
        OTHER
    }
    public GameObject toolController;
 	public bool isImporter = false;

    // Common Gameobjects required by tools    
    protected Transform master, directionMaster;
    protected ToolController toolControllerComponent;
    protected VirtualMeter VirtualCoord;
    UnityEvent OculusTouchTrigger, OculusTouchTriggerOn;
    
	private static bool isHolding;
    void Start()
    {
        toolControllerComponent = toolController.GetComponent<ToolController>();
        VirtualCoord = toolControllerComponent.VirtualMeterGameObject.GetComponent<VirtualMeter>();
    }

    // public interface 
    public void OnUse( )
    {
        Debug.Log("Tool OnUse");        

        master          = toolControllerComponent.GetMaster();
        directionMaster = toolControllerComponent.GetDirectionMaster();

        if ( !ToolController.ToolIsCurrentlyRunning ) 
        {
            PauseAndGUIBehaviour.isPause = false;
            PauseAndGUIBehaviour.isToolMenu = false;
       	    if (isImporter)
            {
                //string path = EditorUtility.OpenFilePanel("Open CSV", "", "csv"); // disabled for now, need to find a non-editor file panel
                string path = "";
                if (path.Length != 0)
                {
                    LoadFromFile(path);
                }
            }
            else
            {
                ToolController.ToolIsCurrentlyRunning = true;
                toolControllerComponent.StartCoroutine(ToolCoroutine()); // run coroutines on tool controller
            }
        }
    }         
   
    public virtual IEnumerator ToolCoroutine( )
    {
        WaitForEndOfFrame wfeof = new WaitForEndOfFrame();
        ToolController.ToolIsCurrentlyRunning = false;
        yield return wfeof;
    }

    public static bool checkIfToolShouldQuit()
    {
        if (OVRInput.Get(OVRInput.Axis1D.SecondaryHandTrigger) <= 0.3f && isHolding)
        {
            isHolding = false;
        }

        if (Input.GetMouseButton(1) 
            //|| OVRInput.GetDown(OVRInput.Button.One) 
            //|| OVRInput.GetDown(OVRInput.Button.Two)  
            //|| OVRInput.GetDown(OVRInput.Button.Three) 
            //|| OVRInput.GetDown(OVRInput.Button.Four)
            || OVRInput.Get(OVRInput.Axis1D.SecondaryHandTrigger) > 0.3f && !isHolding
            //|| PauseAndGUIBehaviour.isPause == true
            //|| PauseAndGUIBehaviour.isModeMenu == true
            //|| PauseAndGUIBehaviour.isToolMenu == true            
    )
        {
            isHolding = true;
            return true;
        }
        return false;
    }
    
    public virtual GameObject LoadFromFile(string FilePath)
    {
        return null;
    }
    
    
}
